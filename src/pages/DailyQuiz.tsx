
import { useState } from "react";
import { Link } from "react-router-dom";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Progress } from "@/components/ui/progress";
import { BookOpen, ArrowLeft, CheckCircle, XCircle, Lightbulb } from "lucide-react";
import { toast } from "@/hooks/use-toast";

// DailyQuiz Component - Handles AI-generated daily quizzes
// This component manages quiz state, scoring, and displays solutions
const DailyQuiz = () => {
  // Quiz state management
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<string[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [quizCompleted, setQuizCompleted] = useState(false);

  // Mock quiz data - in real app this would be generated by AI
  const quizData = {
    title: "Daily Mathematics Quiz - January 16, 2025",
    subject: "Mathematics",
    totalQuestions: 5,
    questions: [
      {
        id: 1,
        question: "What is the derivative of f(x) = x³ + 2x² - 5x + 1?",
        options: [
          "3x² + 4x - 5",
          "3x² + 2x - 5",
          "x² + 4x - 5",
          "3x² + 4x + 5"
        ],
        correct: 0,
        explanation: "Using the power rule: d/dx(x³) = 3x², d/dx(2x²) = 4x, d/dx(-5x) = -5, d/dx(1) = 0"
      },
      {
        id: 2,
        question: "Solve for x: 2x + 7 = 15",
        options: ["x = 4", "x = 8", "x = 3", "x = 11"],
        correct: 0,
        explanation: "2x + 7 = 15 → 2x = 15 - 7 → 2x = 8 → x = 4"
      },
      {
        id: 3,
        question: "What is the area of a circle with radius 5?",
        options: ["25π", "10π", "5π", "15π"],
        correct: 0,
        explanation: "Area = πr² = π(5)² = 25π"
      },
      {
        id: 4,
        question: "Which of the following is equivalent to log₂(8)?",
        options: ["3", "2", "4", "8"],
        correct: 0,
        explanation: "log₂(8) = log₂(2³) = 3, because 2³ = 8"
      },
      {
        id: 5,
        question: "What is the slope of the line passing through points (2,3) and (4,7)?",
        options: ["2", "1", "3", "4"],
        correct: 0,
        explanation: "Slope = (y₂-y₁)/(x₂-x₁) = (7-3)/(4-2) = 4/2 = 2"
      }
    ]
  };

  // Handle answer selection
  const handleAnswerSelect = (value: string) => {
    const newAnswers = [...selectedAnswers];
    newAnswers[currentQuestion] = value;
    setSelectedAnswers(newAnswers);
  };

  // Navigate to next question
  const handleNext = () => {
    if (currentQuestion < quizData.totalQuestions - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      handleSubmitQuiz();
    }
  };

  // Navigate to previous question
  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  // Submit quiz and calculate score
  const handleSubmitQuiz = () => {
    const score = selectedAnswers.reduce((acc, answer, index) => {
      return acc + (parseInt(answer) === quizData.questions[index].correct ? 1 : 0);
    }, 0);
    
    const percentage = Math.round((score / quizData.totalQuestions) * 100);
    
    setQuizCompleted(true);
    setShowResults(true);
    
    toast({
      title: "Quiz Completed!",
      description: `You scored ${score}/${quizData.totalQuestions} (${percentage}%)`,
    });
  };

  // Calculate current progress
  const progress = ((currentQuestion + 1) / quizData.totalQuestions) * 100;

  // Get current question data
  const current = quizData.questions[currentQuestion];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-green-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between py-4">
            <Link to="/" className="flex items-center space-x-2 text-gray-600 hover:text-blue-600">
              <ArrowLeft className="h-5 w-5" />
              <span>Back to Dashboard</span>
            </Link>
            <div className="flex items-center space-x-2">
              <BookOpen className="h-6 w-6 text-blue-600" />
              <h1 className="text-xl font-bold text-gray-900">Daily Quiz</h1>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {!showResults ? (
          // Quiz Interface
          <div className="space-y-6">
            {/* Quiz Header */}
            <Card>
              <CardHeader>
                <CardTitle>{quizData.title}</CardTitle>
                <CardDescription className="flex items-center justify-between">
                  <span>Subject: {quizData.subject}</span>
                  <span>Question {currentQuestion + 1} of {quizData.totalQuestions}</span>
                </CardDescription>
                <Progress value={progress} className="w-full" />
              </CardHeader>
            </Card>

            {/* Current Question */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">
                  Question {currentQuestion + 1}
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <p className="text-lg font-medium">{current.question}</p>
                
                <RadioGroup 
                  value={selectedAnswers[currentQuestion] || ""} 
                  onValueChange={handleAnswerSelect}
                  className="space-y-3"
                >
                  {current.options.map((option, index) => (
                    <div key={index} className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50">
                      <RadioGroupItem value={index.toString()} id={`option-${index}`} />
                      <Label htmlFor={`option-${index}`} className="flex-1 cursor-pointer">
                        {option}
                      </Label>
                    </div>
                  ))}
                </RadioGroup>

                {/* Navigation Buttons */}
                <div className="flex justify-between pt-4">
                  <Button 
                    variant="outline" 
                    onClick={handlePrevious}
                    disabled={currentQuestion === 0}
                  >
                    Previous
                  </Button>
                  
                  <Button 
                    onClick={handleNext}
                    disabled={!selectedAnswers[currentQuestion]}
                    className="bg-blue-600 hover:bg-blue-700"
                  >
                    {currentQuestion === quizData.totalQuestions - 1 ? "Submit Quiz" : "Next"}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        ) : (
          // Results Interface
          <div className="space-y-6">
            {/* Score Summary */}
            <Card>
              <CardHeader className="text-center">
                <CardTitle className="text-2xl">Quiz Results</CardTitle>
                <CardDescription>Here's how you performed</CardDescription>
              </CardHeader>
              <CardContent className="text-center">
                <div className="text-4xl font-bold text-green-600 mb-2">
                  {Math.round((selectedAnswers.reduce((acc, answer, index) => {
                    return acc + (parseInt(answer) === quizData.questions[index].correct ? 1 : 0);
                  }, 0) / quizData.totalQuestions) * 100)}%
                </div>
                <p className="text-gray-600">
                  {selectedAnswers.reduce((acc, answer, index) => {
                    return acc + (parseInt(answer) === quizData.questions[index].correct ? 1 : 0);
                  }, 0)} out of {quizData.totalQuestions} questions correct
                </p>
              </CardContent>
            </Card>

            {/* Detailed Solutions */}
            <div className="space-y-4">
              <h3 className="text-xl font-bold text-gray-900 flex items-center gap-2">
                <Lightbulb className="h-5 w-5" />
                Step-by-Step Solutions
              </h3>
              
              {quizData.questions.map((question, index) => {
                const userAnswer = parseInt(selectedAnswers[index]);
                const isCorrect = userAnswer === question.correct;
                
                return (
                  <Card key={question.id} className={`border-l-4 ${isCorrect ? 'border-l-green-500' : 'border-l-red-500'}`}>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2 text-lg">
                        {isCorrect ? (
                          <CheckCircle className="h-5 w-5 text-green-600" />
                        ) : (
                          <XCircle className="h-5 w-5 text-red-600" />
                        )}
                        Question {index + 1}
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <p className="font-medium">{question.question}</p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <p className="text-sm font-medium text-gray-700 mb-2">Your Answer:</p>
                          <p className={`p-2 rounded ${isCorrect ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                            {question.options[userAnswer] || "Not answered"}
                          </p>
                        </div>
                        
                        {!isCorrect && (
                          <div>
                            <p className="text-sm font-medium text-gray-700 mb-2">Correct Answer:</p>
                            <p className="p-2 rounded bg-green-100 text-green-800">
                              {question.options[question.correct]}
                            </p>
                          </div>
                        )}
                      </div>
                      
                      <div className="bg-blue-50 p-4 rounded-lg">
                        <p className="text-sm font-medium text-blue-800 mb-1">Explanation:</p>
                        <p className="text-blue-700">{question.explanation}</p>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>

            {/* Action Buttons */}
            <div className="flex gap-4 justify-center">
              <Link to="/">
                <Button variant="outline">Back to Dashboard</Button>
              </Link>
              <Button onClick={() => window.location.reload()} className="bg-blue-600 hover:bg-blue-700">
                Take Another Quiz
              </Button>
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default DailyQuiz;
